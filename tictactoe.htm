<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Tic Tac Toe</title>
<style>
body {
  margin: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background: radial-gradient(circle at top left, #0d0d0d, #1a1a1a);
  font-family: 'Arial', sans-serif;
  flex-direction: column;
  gap: 20px;
}

.board {
  display: grid;
  grid-template-columns: repeat(3, 120px);
  grid-template-rows: repeat(3, 120px);
  gap: 15px;
  background: #111;
  padding: 20px;
  border-radius: 20px;
  box-shadow: 0 0 40px rgb(241, 1, 125), 0 0 80px rgb(183, 255, 0);
  position: relative; /* needed for strike line */
}

.cell {
  background: #222;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 3rem;
  color: transparent;
  cursor: pointer;
  position: relative;
  border-radius: 10px;
  transition: transform 0.2s, box-shadow 0.3s;
}

.cell:hover:not(.clicked-x):not(.clicked-o)::before {
  content: attr(data-preview);
  position: absolute;
  font-size: 3rem;
  opacity: 0.4;
}

.cell.clicked-x {
  color: rgb(241, 1, 125);
  animation: pop 0.3s ease;
  text-shadow: 0 0 10px rgb(241, 1, 125), 0 0 20px rgb(241, 1, 125);
}

.cell.clicked-o {
  color: rgb(183, 255, 0);
  animation: pop 0.3s ease;
  text-shadow: 0 0 10px rgb(183, 255, 0), 0 0 20px rgb(183, 255, 0);
}

@keyframes pop {
  0% { transform: scale(0); }
  50% { transform: scale(1.3); }
  100% { transform: scale(1); }
}

#message {
  color: rgb(183, 255, 0);
  font-size: 1.5rem;
  font-weight: bold;
}

#reset-btn {
  padding: 10px 20px;
  font-size: 1rem;
  background: #222;
  color: rgb(183, 255, 0);
  border: none;
  border-radius: 10px;
  cursor: pointer;
  box-shadow: 0 0 10px rgb(183, 255, 0);
  transition: transform 0.2s, box-shadow 0.2s;
}

#reset-btn:hover {
  transform: scale(1.05);
  box-shadow: 0 0 20px rgb(183, 255, 0);
}

/* Strike line */
.strike {
  position: absolute;
  height: 6px;
  background: rgb(241, 1, 125); /* will change dynamically */
  top: 0;
  left: 0;
  width: 0;
  transform-origin: left center;
  transition: all 0.5s ease;
  border-radius: 3px;
}
</style>
</head>
<body>
<div id="message">Turn: X</div>
<div class="board">
  <div class="cell"></div>
  <div class="cell"></div>
  <div class="cell"></div>
  <div class="cell"></div>
  <div class="cell"></div>
  <div class="cell"></div>
  <div class="cell"></div>
  <div class="cell"></div>
  <div class="cell"></div>
  <div class="strike"></div>
</div>
<button id="reset-btn">Reset Game</button>

<script>
const cells = document.querySelectorAll('.cell');
const message = document.getElementById('message');
const resetBtn = document.getElementById('reset-btn');
const strike = document.querySelector('.strike');

let turn = 'x';
let boardState = Array(9).fill(null);
let gameOver = false;

function updatePreview() {
  cells.forEach((cell, index) => {
    if (!cell.classList.contains('clicked-x') && !cell.classList.contains('clicked-o')) {
      cell.setAttribute('data-preview', turn.toUpperCase());
    } else {
      cell.removeAttribute('data-preview');
    }
  });
  if(!gameOver) message.textContent = `Turn: ${turn.toUpperCase()}`;
}

function checkWinner() {
  const winCombos = [
    [0,1,2],[3,4,5],[6,7,8],
    [0,3,6],[1,4,7],[2,5,8],
    [0,4,8],[2,4,6]
  ];

  for (let combo of winCombos) {
    const [a,b,c] = combo;
    if(boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {
      return {winner: boardState[a], combo};
    }
  }
  return null;
}

function checkTie() {
  return boardState.every(cell => cell !== null);
}

function showStrike(combo, winner) {
  const firstCell = cells[combo[0]].getBoundingClientRect();
  const lastCell = cells[combo[2]].getBoundingClientRect();
  const boardRect = document.querySelector('.board').getBoundingClientRect();

  const startX = firstCell.left + firstCell.width/2 - boardRect.left;
  const startY = firstCell.top + firstCell.height/2 - boardRect.top;
  const endX = lastCell.left + lastCell.width/2 - boardRect.left;
  const endY = lastCell.top + lastCell.height/2 - boardRect.top;

  const dx = endX - startX;
  const dy = endY - startY;
  const length = Math.sqrt(dx*dx + dy*dy);
  const angle = Math.atan2(dy, dx) * 180 / Math.PI;

  strike.style.width = `${length}px`;
  strike.style.top = `${startY}px`;
  strike.style.left = `${startX}px`;
  strike.style.transform = `rotate(${angle}deg)`;
  strike.style.background = winner === 'x' ? 'rgb(241, 1, 125)' : 'rgb(183, 255, 0)';
}

cells.forEach((cell, index) => {
  cell.addEventListener('click', () => {
    if(gameOver) return;
    if(cell.classList.contains('clicked-x') || cell.classList.contains('clicked-o')) return;

    if(turn === 'x') {
      cell.classList.add('clicked-x');
      cell.textContent = 'X';
      boardState[index] = 'x';
    } else {
      cell.classList.add('clicked-o');
      cell.textContent = 'O';
      boardState[index] = 'o';
    }

    const result = checkWinner();
    if(result) {
      message.textContent = `${result.winner.toUpperCase()} wins!`;
      gameOver = true;
      showStrike(result.combo, result.winner);
      return;
    }

    if(checkTie()) {
      message.textContent = `It's a Tie!`;
      gameOver = true;
      return;
    }

    turn = turn === 'x' ? 'o' : 'x';
    updatePreview();
  });
});

resetBtn.addEventListener('click', () => {
  boardState.fill(null);
  turn = 'x';
  gameOver = false;
  cells.forEach(cell => {
    cell.classList.remove('clicked-x','clicked-o');
    cell.textContent = '';
  });
  strike.style.width = '0';
  updatePreview();
});

updatePreview();
</script>
</body>
</html>
